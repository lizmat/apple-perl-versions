#!/bin/bash
#
# Parses Apple's Perl build Makefile.inc for variable values.
#
# An example:
#   DEFAULT = 5.18
#   KNOWNVERSIONS = 5.16 5.18
#
set -e -o pipefail -o nounset

if [[ $# -eq 0 || -z $1 ]]; then
  echo "usage: $(basename $0) build-number" >&2
  exit 1
fi

build=$1

function parse_makefile() {
  sort \
    | perl -anle 'print join "|", sort { $b <=> $a } splice @F, 2' \
    | paste --serial
}

function extract-major-versions() {
  if [[ ${build/.*} -ge 92 ]]; then
    curl -fsS https://opensource.apple.com/source/perl/perl-$build/Platforms/MacOSX/Makefile.inc?txt \
      | grep -m1 -P '^KNOWNVERSIONS =' \
      | perl -anle 'print for splice @F, 2'

  elif [[ ${build/.*} -ge 63 ]]; then
    curl -fsS http://opensource.apple.com/source/perl/perl-$build/Makefile?txt \
      | grep -m1 -P '^VERSIONS =' \
      | perl -anle 'print for splice @F, 2'

  else
    curl -fsS http://opensource.apple.com/source/perl/perl-$build/dpkg/control?txt \
      | grep -oP '(?<=^Version: )\S+' \
      | perl -nle 'chomp; print "$_\t"'
  fi
}

function map-to-minor-version() {
  major=$1
  curl -fsS https://opensource.apple.com/source/perl/perl-$build/$major/GNUmakefile?txt \
    | grep -m1 -P '^VERSION =' \
    | perl -anle 'print $F[2]'
}

for major in $(extract-major-versions); do
  map-to-minor-version $major
done
